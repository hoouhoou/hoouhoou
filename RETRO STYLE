<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Retro Rewind: Interactive TV Tracker</title>
    <link href="https://fonts.googleapis.com/css2?family=Bebas+Neue&family=Chivo:wght@300;400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary: #ff4d4d;
            --secondary: #1c4587;
            --accent: #ffcc00;
            --accent-dark: #e6b800;
            --dark: #1a1a1a;
            --light: #f8f9fa;
            --vintage: #e6d2aa;
            --success: #4CAF50;
        }
        
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }
        
        body {
            font-family: 'Chivo', sans-serif;
            margin: 0;
            background: linear-gradient(to bottom, #2c3e50, #1a1a1a);
            color: var(--light);
            line-height: 1.6;
            background-attachment: fixed;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 1rem;
        }
        
        /* Header Styles */
        header {
            background: linear-gradient(135deg, var(--secondary) 0%, #0a2a5e 100%);
            color: #fff;
            padding: 2.5rem 1rem;
            text-align: center;
            position: relative;
            overflow: hidden;
            border-bottom: 5px solid var(--accent);
        }
        
        header::before {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="100" height="100" opacity="0.05"><circle cx="50" cy="50" r="40" fill="white"/></svg>');
            opacity: 0.1;
        }
        
        .header-content {
            position: relative;
            z-index: 2;
        }
        
        h1 {
            margin: 0;
            font-size: 4rem;
            font-family: 'Bebas Neue', cursive;
            letter-spacing: 3px;
            text-shadow: 3px 3px 0 rgba(0,0,0,0.3);
            color: var(--accent);
            transition: all 0.3s ease;
        }
        
        h1:focus {
            outline: 2px solid var(--accent);
            border-radius: 4px;
        }
        
        header p {
            font-size: 1.5rem;
            margin-top: 0.5rem;
            color: white;
            max-width: 600px;
            margin-left: auto;
            margin-right: auto;
        }
        
        .film-strip {
            display: flex;
            justify-content: center;
            margin: 1.5rem 0;
            gap: 10px;
        }
        
        .film-frame {
            width: 60px;
            height: 60px;
            background: var(--dark);
            border: 2px solid var(--accent);
            border-radius: 4px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            color: var(--accent);
            cursor: pointer;
            transition: transform 0.3s ease;
        }
        
        .film-frame:hover {
            transform: scale(1.1);
            background: rgba(0, 0, 0, 0.5);
        }
        
        /* Section Styles */
        section {
            padding: 2rem 0;
        }
        
        h2 {
            font-family: 'Bebas Neue', cursive;
            font-size: 2.5rem;
            letter-spacing: 2px;
            margin: 2rem 0 1rem;
            color: var(--accent);
            text-align: center;
            position: relative;
            padding-bottom: 0.5rem;
            transition: all 0.3s ease;
        }
        
        h2:focus {
            outline: 2px solid var(--accent);
            border-radius: 4px;
        }
        
        h2::after {
            content: "";
            position: absolute;
            bottom: 0;
            left: 50%;
            transform: translateX(-50%);
            width: 100px;
            height: 4px;
            background: var(--primary);
            border-radius: 2px;
        }
        
        /* Table Styles */
        .table-container {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 12px;
            padding: 1.5rem;
            margin: 1.5rem 0;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
            backdrop-filter: blur(8px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            overflow-x: auto;
            transition: transform 0.3s ease;
        }
        
        .table-container:hover {
            transform: translateY(-5px);
        }
        
        table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
            margin: 1rem 0;
            border-radius: 8px;
            overflow: hidden;
        }
        
        th, td {
            padding: 1rem;
            text-align: left;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        th {
            background: linear-gradient(to bottom, var(--secondary), #0d3269);
            color: white;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 1px;
            position: sticky;
            top: 0;
        }
        
        tr:nth-child(even) {
            background-color: rgba(255, 255, 255, 0.03);
        }
        
        tr:hover {
            background-color: rgba(255, 255, 255, 0.08);
        }
        
        td[contenteditable="true"] {
            background-color: rgba(255, 254, 240, 0.2);
            border-radius: 4px;
            transition: all 0.3s ease;
            min-height: 20px;
            min-width: 50px;
        }
        
        td[contenteditable="true"]:focus {
            background-color: rgba(255, 254, 240, 0.4);
            outline: 2px solid var(--accent);
        }
        
        /* Progress bars for availability */
        .progress-container {
            width: 100%;
            background-color: rgba(255, 255, 255, 0.2);
            border-radius: 10px;
            height: 20px;
            position: relative;
        }
        
        .progress-bar {
            height: 100%;
            border-radius: 10px;
            background: linear-gradient(90deg, var(--primary), var(--accent));
            text-align: right;
            color: white;
            font-size: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: width 0.5s ease;
            min-width: 0%;
        }
        
        /* Button Styles */
        .button-group {
            display: flex;
            justify-content: center;
            gap: 1rem;
            margin: 2rem 0;
        }
        
        .save-button {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.8rem 1.8rem;
            background: linear-gradient(to right, var(--primary), #ff6b6b);
            color: white;
            border: none;
            border-radius: 50px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(255, 77, 77, 0.3);
        }
        
        .save-button:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(255, 77, 77, 0.4);
        }
        
        .save-button:active {
            transform: translateY(0);
        }
        
        .reset-button {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.8rem 1.8rem;
            background: rgba(255, 255, 255, 0.1);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 50px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .reset-button:hover {
            background: rgba(255, 255, 255, 0.2);
        }
        
        /* Footer Styles */
        .footer {
            text-align: center;
            padding: 2.5rem;
            background: linear-gradient(135deg, #0a1930 0%, #1c4587 100%);
            color: #fff;
            margin-top: 3rem;
            border-top: 5px solid var(--accent);
            position: relative;
            overflow: hidden;
        }
        
        .footer::before {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="100" height="100" opacity="0.05"><polygon points="50,0 100,50 50,100 0,50" fill="white"/></svg>');
            opacity: 0.1;
        }
        
        .footer-content {
            position: relative;
            z-index: 2;
        }
        
        /* Animation for film strip */
        @keyframes flicker {
            0% { opacity: 0.8; }
            5% { opacity: 0.9; }
            10% { opacity: 0.7; }
            15% { opacity: 0.95; }
            20% { opacity: 0.8; }
            100% { opacity: 1; }
        }
        
        .film-frame {
            animation: flicker 4s infinite;
        }
        
        .film-frame:nth-child(2) {
            animation-delay: 0.5s;
        }
        
        .film-frame:nth-child(3) {
            animation-delay: 1s;
        }
        
        .film-frame:nth-child(4) {
            animation-delay: 1.5s;
        }
        
        .film-frame:nth-child(5) {
            animation-delay: 2s;
        }
        
        /* Toast notification */
        .toast {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: var(--success);
            color: white;
            padding: 1rem 2rem;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
            display: flex;
            align-items: center;
            gap: 10px;
            transform: translateY(100px);
            opacity: 0;
            transition: all 0.5s ease;
            z-index: 1000;
        }
        
        .toast.show {
            transform: translateY(0);
            opacity: 1;
        }
        
        /* Responsive adjustments */
        @media (max-width: 768px) {
            h1 {
                font-size: 2.5rem;
            }
            
            header p {
                font-size: 1.2rem;
            }
            
            .film-frame {
                width: 40px;
                height: 40px;
                font-size: 1rem;
            }
            
            h2 {
                font-size: 2rem;
            }
            
            th, td {
                padding: 0.7rem;
            }
            
            .button-group {
                flex-direction: column;
                align-items: center;
            }
        }
        
        /* New additions */
        .instructions {
            text-align: center;
            margin: 1rem 0;
            font-style: italic;
            opacity: 0.8;
        }
        
        .tv-icon {
            display: inline-block;
            margin-right: 10px;
        }
        
        .empty-cell-hint::before {
            content: "Click to edit";
            color: rgba(255, 255, 255, 0.4);
            font-style: italic;
        }
        
        .empty-cell-hint:focus::before {
            content: "";
        }
        
        .episode-input {
            width: 60px;
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            color: white;
            padding: 5px;
            border-radius: 4px;
            text-align: center;
        }
        
        .calc-button {
            background: var(--secondary);
            color: white;
            border: none;
            border-radius: 4px;
            padding: 5px 10px;
            cursor: pointer;
            margin-left: 5px;
            transition: background 0.3s;
        }
        
        .calc-button:hover {
            background: #2a59a8;
        }
        
        .interactive-hint {
            font-size: 0.8rem;
            color: var(--accent);
            margin-top: 5px;
            display: block;
        }
    </style>
</head>
<body>
    <header>
        <div class="container header-content">
            <div class="film-strip">
                <div class="film-frame" onclick="addShow()" title="Add a new show">➕</div>
                <div class="film-frame">📺</div>
                <div class="film-frame">🍿</div>
                <div class="film-frame">🎭</div>
                <div class="film-frame" onclick="window.print()" title="Print schedule">🖨️</div>
            </div>
            <h1 contenteditable="true">RETRO REWIND</h1>
            <p contenteditable="true">Your Time Machine to Classic Television Adventures!</p>
        </div>
    </header>

    <main class="container">
        <section>
            <p class="instructions">Enter Total Episodes and Available Episodes to automatically calculate completion percentage!</p>
            
            <h2 contenteditable="true"><span class="tv-icon">📺</span> Show Availability</h2>
            <div class="table-container">
                <table id="availability">
                    <tbody>
                        <tr>
                            <th>Title</th>
                            <th>Total Episodes</th>
                            <th>Available</th>
                            <th>% Completed</th>
                            <th>Available Until</th>
                        </tr>
                        <tr>
                            <td contenteditable="true" class="empty-cell-hint">The Twilight Zone</td>
                            <td>
                                <input type="number" class="episode-input total-episodes" value="156" min="1">
                            </td>
                            <td>
                                <input type="number" class="episode-input available-episodes" value="120" min="0">
                            </td>
                            <td>
                                <div class="progress-container">
                                    <div class="progress-bar" style="width: 76.9%">76.9%</div>
                                </div>
                            </td>
                            <td contenteditable="true" class="empty-cell-hint">Dec 31, 2025</td>
                        </tr>
                        <tr>
                            <td contenteditable="true" class="empty-cell-hint">I Love Lucy</td>
                            <td>
                                <input type="number" class="episode-input total-episodes" value="180" min="1">
                            </td>
                            <td>
                                <input type="number" class="episode-input available-episodes" value="150" min="0">
                            </td>
                            <td>
                                <div class="progress-container">
                                    <div class="progress-bar" style="width: 83.3%">83.3%</div>
                                </div>
                            </td>
                            <td contenteditable="true" class="empty-cell-hint">Oct 15, 2025</td>
                        </tr>
                        <tr>
                            <td contenteditable="true" class="empty-cell-hint">Star Trek: TOS</td>
                            <td>
                                <input type="number" class="episode-input total-episodes" value="79" min="1">
                            </td>
                            <td>
                                <input type="number" class="episode-input available-episodes" value="79" min="0">
                            </td>
                            <td>
                                <div class="progress-container">
                                    <div class="progress-bar" style="width: 100%">100%</div>
                                </div>
                            </td>
                            <td contenteditable="true" class="empty-cell-hint">No expiration</td>
                        </tr>
                        <tr>
                            <td contenteditable="true" class="empty-cell-hint">The Andy Griffith Show</td>
                            <td>
                                <input type="number" class="episode-input total-episodes" value="249" min="1">
                            </td>
                            <td>
                                <input type="number" class="episode-input available-episodes" value="180" min="0">
                            </td>
                            <td>
                                <div class="progress-container">
                                    <div class="progress-bar" style="width: 72.3%">72.3%</div>
                                </div>
                            </td>
                            <td contenteditable="true" class="empty-cell-hint">Jun 30, 2025</td>
                        </tr>
                        <tr>
                            <td contenteditable="true" class="empty-cell-hint">M*A*S*H</td>
                            <td>
                                <input type="number" class="episode-input total-episodes" value="256" min="1">
                            </td>
                            <td>
                                <input type="number" class="episode-input available-episodes" value="200" min="0">
                            </td>
                            <td>
                                <div class="progress-container">
                                    <div class="progress-bar" style="width: 78.1%">78.1%</div>
                                </div>
                            </td>
                            <td contenteditable="true" class="empty-cell-hint">Sep 15, 2025</td>
                        </tr>
                    </tbody>
                </table>
            </div>

            <h2 contenteditable="true"><span class="tv-icon">📅</span> Weekly Schedule</h2>
            <div class="table-container">
                <table id="schedule">
                    <tbody>
                        <tr>
                            <th>Monday</th>
                            <th>Tuesday</th>
                            <th>Wednesday</th>
                            <th>Thursday</th>
                            <th>Friday</th>
                            <th>Saturday</th>
                            <th>Sunday</th>
                        </tr>
                        <tr>
                            <td contenteditable="true" class="empty-cell-hint">I Love Lucy</td>
                            <td contenteditable="true" class="empty-cell-hint">Star Trek</td>
                            <td contenteditable="true" class="empty-cell-hint">Twilight Zone</td>
                            <td contenteditable="true" class="empty-cell-hint">M*A*S*H</td>
                            <td contenteditable="true" class="empty-cell-hint">Andy Griffith</td>
                            <td contenteditable="true" class="empty-cell-hint">Movie Night</td>
                            <td contenteditable="true" class="empty-cell-hint">Classic Cartoons</td>
                            
                        </tr>
                        </tr>
                        <tr>
                            <td contenteditable="true" class="empty-cell-hint">I Love Lucy</td>
                            <td contenteditable="true" class="empty-cell-hint">Star Trek</td>
                            <td contenteditable="true" class="empty-cell-hint">Twilight Zone</td>
                            <td contenteditable="true" class="empty-cell-hint">M*A*S*H</td>
                            <td contenteditable="true" class="empty-cell-hint">Andy Griffith</td>
                            <td contenteditable="true" class="empty-cell-hint">Movie Night</td>
                            <td contenteditable="true" class="empty-cell-hint">Classic Cartoons</td>
                            
                        </tr>
                    </tbody>
                </table>
            </div>

            <h2 contenteditable="true"><span class="tv-icon">🗓️</span> Start &amp; End Dates</h2>
            <div class="table-container">
                <table id="dates">
                    <tbody>
                        <tr>
                            <th>Title</th>
                            <th>Start Date</th>
                            <th>End Date</th>
                            <th>Notes</th>
                        </tr>
                        <tr>
                            <td contenteditable="true" class="empty-cell-hint">The Twilight Zone</td>
                            <td contenteditable="true" class="empty-cell-hint">Jan 15, 2025</td>
                            <td contenteditable="true" class="empty-cell-hint">Dec 31, 2025</td>
                            <td contenteditable="true" class="empty-cell-hint">Season 1-5</td>
                        </tr>
                        <tr>
                            <td contenteditable="true" class="empty-cell-hint">I Love Lucy</td>
                            <td contenteditable="true" class="empty-cell-hint">Mar 1, 2025</td>
                            <td contenteditable="true" class="empty-cell-hint">Oct 15, 2025</td>
                            <td contenteditable="true" class="empty-cell-hint">All seasons</td>
                        </tr>
                        <tr>
                            <td contenteditable="true" class="empty-cell-hint">Star Trek: TOS</td>
                            <td contenteditable="true" class="empty-cell-hint">Feb 10, 2025</td>
                            <td contenteditable="true" class="empty-cell-hint">No expiration</td>
                            <td contenteditable="true" class="empty-cell-hint">Complete series</td>
                        </tr>
                        <tr>
                            <td contenteditable="true" class="empty-cell-hint">The Andy Griffith Show</td>
                            <td contenteditable="true" class="empty-cell-hint">Apr 5, 2025</td>
                            <td contenteditable="true" class="empty-cell-hint">Jun 30, 2025</td>
                            <td contenteditable="true" class="empty-cell-hint">Seasons 1-5</td>
                        </tr>
                        <tr>
                            <td contenteditable="true" class="empty-cell-hint">M*A*S*H</td>
                            <td contenteditable="true" class="empty-cell-hint">May 20, 2025</td>
                            <td contenteditable="true" class="empty-cell-hint">Sep 15, 2025</td>
                            <td contenteditable="true" class="empty-cell-hint">Seasons 1-8</td>
                        </tr>
                    </tbody>
                </table>
            </div>
            
            <div class="button-group">
                <button class="save-button" onclick="saveEdits()">
                    <i class="fas fa-save"></i> Save Changes
                </button>
                <button class="reset-button" onclick="resetEdits()">
                    <i class="fas fa-undo"></i> Reset Changes
                </button>
                <button class="save-button" onclick="addShow()">
                    <i class="fas fa-plus"></i> Add Show
                </button>
            </div>
        </section>
    </main>

    <div class="footer">
        <div class="container footer-content">
            <p>© 2025 Retro Rewind - Classic TV Time Machine</p>
            <p>Made with ❤️ for classic TV enthusiasts</p>
        </div>
    </div>

    <div class="toast" id="saveToast">
        <i class="fas fa-check-circle"></i>
        <span>Changes saved successfully!</span>
    </div>

    <script>
        // Initialize the interactive functionality
        document.addEventListener('DOMContentLoaded', function() {
            // Add event listeners to all episode input fields
            const totalInputs = document.querySelectorAll('.total-episodes');
            const availableInputs = document.querySelectorAll('.available-episodes');
            
            totalInputs.forEach(input => {
                input.addEventListener('input', updateProgressBar);
            });
            
            availableInputs.forEach(input => {
                input.addEventListener('input', updateProgressBar);
            });
            
            // Set up contenteditable cells
            const editableCells = document.querySelectorAll('[contenteditable="true"]');
            editableCells.forEach(cell => {
                cell.addEventListener('blur', function() {
                    if (this.textContent.trim() === '') {
                        this.classList.add('empty-cell-hint');
                    }
                });
                
                cell.addEventListener('focus', function() {
                    this.classList.remove('empty-cell-hint');
                    if (this.textContent === 'Click to edit') {
                        this.textContent = '';
                    }
                });
            });
        });
        
        // Function to update progress bars based on input values
        function updateProgressBar() {
            const rows = document.querySelectorAll('#availability tbody tr');
            
            // Skip the header row
            for (let i = 1; i < rows.length; i++) {
                const row = rows[i];
                const totalInput = row.querySelector('.total-episodes');
                const availableInput = row.querySelector('.available-episodes');
                const progressBar = row.querySelector('.progress-bar');
                
                if (totalInput && availableInput && progressBar) {
                    const total = parseInt(totalInput.value) || 0;
                    const available = parseInt(availableInput.value) || 0;
                    
                    // Calculate percentage
                    let percentage = 0;
                    if (total > 0) {
                        percentage = Math.min(100, Math.round((available / total) * 1000) / 10);
                    }
                    
                    // Update progress bar
                    progressBar.style.width = percentage + '%';
                    progressBar.textContent = percentage + '%';
                    
                    // Change color based on percentage
                    if (percentage >= 90) {
                        progressBar.style.background = 'linear-gradient(90deg, #4CAF50, #8BC34A)';
                    } else if (percentage >= 50) {
                        progressBar.style.background = 'linear-gradient(90deg, var(--primary), var(--accent))';
                    } else {
                        progressBar.style.background = 'linear-gradient(90deg, #ff4d4d, #ff6b6b)';
                    }
                }
            }
        }
        
        // Function to add a new show
        function addShow() {
            const table = document.querySelector('#availability tbody');
            const newRow = document.createElement('tr');
            
            newRow.innerHTML = `
                <td contenteditable="true" class="empty-cell-hint">New Show</td>
                <td><input type="number" class="episode-input total-episodes" value="0" min="1"></td>
                <td><input type="number" class="episode-input available-episodes" value="0" min="0"></td>
                <td>
                    <div class="progress-container">
                        <div class="progress-bar" style="width: 0%">0%</div>
                    </div>
                </td>
                <td contenteditable="true" class="empty-cell-hint">Date</td>
            `;
            
            table.appendChild(newRow);
            
            // Add event listeners to the new inputs
            const totalInput = newRow.querySelector('.total-episodes');
            const availableInput = newRow.querySelector('.available-episodes');
            
            totalInput.addEventListener('input', updateProgressBar);
            availableInput.addEventListener('input', updateProgressBar);
            
            // Show a confirmation
            showToast('New show added!');
        }
        
        // Function to show toast notifications
        function showToast(message) {
            const toast = document.getElementById('saveToast');
            toast.querySelector('span').textContent = message;
            toast.classList.add('show');
            
            setTimeout(() => {
                toast.classList.remove('show');
            }, 3000);
        }
        
        // Function to save edits
        function saveEdits() {
            // In a real application, this would save to a database
            // For this demo, we'll just show a toast notification
            showToast('Changes saved successfully!');
            
            // You could also save to localStorage here
            const content = document.documentElement.outerHTML;
            localStorage.setItem('retroRewindBackup', content);
        }
        
        // Function to reset edits
        function resetEdits() {
            if (confirm('Are you sure you want to reset all changes? This cannot be undone.')) {
                localStorage.removeItem('retroRewindBackup');
                location.reload();
            }
        }
        
        // Check for saved data on page load
        window.addEventListener('load', function() {
            const savedData = localStorage.getItem('retroRewindBackup');
            if (savedData && confirm('Found saved data. Would you like to restore it?')) {
                document.documentElement.innerHTML = savedData;
                
                // Reinitialize event listeners after restore
                const totalInputs = document.querySelectorAll('.total-episodes');
                const availableInputs = document.querySelectorAll('.available-episodes');
                
                totalInputs.forEach(input => {
                    input.addEventListener('input', updateProgressBar);
                });
                
                availableInputs.forEach(input => {
                    input.addEventListener('input', updateProgressBar);
                });
                
                updateProgressBar();
            }
        });
    </script>
</body>
</html>
